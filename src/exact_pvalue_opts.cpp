#include "exact_pvalue_opts.h"


void print_help() {
    fprintf(stderr, "Program: FastSpar exact p-values (c++ implementation of SparCC)\n");
    fprintf(stderr, "Version 0.1a\n");
    fprintf(stderr, "Contact: Stephen Watts (s.watts2@student.unimelb.edu.au)\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage:\n");
    fprintf(stderr, "  exact_pavlues [options] --otu_table <of> --correlation <rf> --prefix <p> --permutations <n> --output <o>\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "  -c/--otu_table <of>   OTU input table used to generated correlations\n");
    fprintf(stderr, "  -r/--correlation <rf> Correlation table generated by FastSpar\n");
    fprintf(stderr, "  -p/--prefix <p>       Prefix output of bootstrap output files\n");
    fprintf(stderr, "  -n/--permutations <n> Number of permutations/ bootstraps\n");
    fprintf(stderr, "  -o/--outfile <o>      Output p-value matrix filename\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Options:\n");
    fprintf(stderr, "  -t <th>, --threads <th>\n");
    fprintf(stderr, "                Number of threads (1 default)\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Other:\n");
    fprintf(stderr, "  -h        --help\n");
    fprintf(stderr, "                Display this help and exit\n");
    fprintf(stderr, "  -v        --version\n");
    fprintf(stderr, "                Display version information and exit\n");
}


void print_version() {
    fprintf(stderr, "Program: FastSpar exact p-values (c++ implementation of SparCC)\n");
    fprintf(stderr, "Version: 0.1a\n");
    fprintf(stderr, "Contact: Stephen Watts (s.watts2@student.unimelb.edu.au)\n");
}


ExactpvalOptions get_commandline_arguments(int argc, char **argv) {
    // Get instance of ExactpvalOptions
    ExactpvalOptions exactpval_options;

    // Commandline arguments (for getlongtops)
    struct option long_options[] =
        {
            {"otu_table", required_argument, NULL, 'c'},
            {"prefix", required_argument, NULL, 'p'},
            {"correlation", required_argument, NULL, 'r'},
            {"permutations", required_argument, NULL, 'n'},
            {"outfile", required_argument, NULL, 'o'},
            {"threads", required_argument, NULL, 't'},
            {"version", no_argument, NULL, 'v'},
            {"help", no_argument, NULL, 'h'},
            {NULL, 0, 0, 0}
        };

    // Parse commandline arguments
    while (1) {
        // Parser variables
        int option_index = 0;
        int c;

        // Parser
        c = getopt_long(argc, argv, "hvc:p:r:n:o:t:", long_options, &option_index);

        // If no more arguments to parse, break
        if (c == -1) {
            break;
        }

        // Process current arguments
        switch(c) {
            case 'c':
                exactpval_options.otu_filename = optarg;
                break;
            case 'r':
                exactpval_options.correlation_filename = optarg;
                break;
            case 'p':
                exactpval_options.bootstrap_prefix = optarg;
                break;
            case 'n':
                exactpval_options.permutations = int_from_optarg(optarg);
                break;
            case 't':
                exactpval_options.threads = int_from_optarg(optarg);
                break;
            case 'o':
                exactpval_options.out_filename = optarg;
                break;
            case 'v':
                print_version();
                exit(0);
            case 'h':
                print_help();
                exit(0);
            default:
                exit(1);
        }
    }


    // Check if have an attemp at arguments, else print help
    if (argc < 11) {
        print_help();
        fprintf(stderr, "\n%s: error: options -c/--otu_table, -r/--correlation, -p/--prefix, -n/--permutations and -o/--outfile are required\n", argv[0]);
        exit(0);
    }

    // Abort execution if given unknown arguments
    if (optind < argc){
        print_help();
        fprintf(stderr, "\n%s: invalid argument: %s\n", argv[0], argv[optind++]);
    }


    // Check if have a reasonable number of threads
    if (exactpval_options.threads < 1) {
        print_help();
        fprintf(stderr,"\n%s: error: must specify at least 1 thread\n", argv[0]);
        exit(1);
    }

    // Check we don't attempt to use more threads than we have
    unsigned int available_threads = std::thread::hardware_concurrency();
    if (available_threads > 1 && exactpval_options.threads > available_threads) {
        print_help();
        fprintf(stderr, "\n%s: error: only %d threads are available\n", argv[0], available_threads);
        exit(1);
    } else if (exactpval_options.threads > 64) {
        print_help();
        fprintf(stderr, "\n%s: error: current hardcode limit of 64 threads\n", argv[0]);
        exit(1);
    }


    // Make sure we have filenames and parameters
    if (exactpval_options.otu_filename.empty()) {
        print_help();
        fprintf(stderr,"\n%s: error: argument -c/--otu_table is required\n", argv[0]);
        exit(1);
    }
    if (exactpval_options.bootstrap_prefix.empty()) {
        print_help();
        fprintf(stderr,"\n%s: error: argument -p/--prefix is required\n", argv[0]);
        exit(1);
    }
    if (exactpval_options.correlation_filename.empty()) {
        print_help();
        fprintf(stderr,"\n%s: error: argument -r/--correlation is required\n", argv[0]);
        exit(1);
    }
    if (exactpval_options.permutations == 0) {
        print_help();
        fprintf(stderr,"\n%s: error: argument -n/--permutations is required\n", argv[0]);
        exit(1);
    }
    if (exactpval_options.out_filename.empty()) {
        print_help();
        fprintf(stderr,"\n%s: error: argument -o/--output is required\n", argv[0]);
        exit(1);
    }


    // Check that the OTU file exists
    std::ifstream checkfile;
    checkfile.open(exactpval_options.otu_filename);
    if (!checkfile.good()) {
        print_help();
        fprintf(stderr, "\n%s: error: OTU table %s does not exist\n", argv[0], exactpval_options.otu_filename.c_str());
        exit(1);
    }
    checkfile.close();

    // Check that the correlation file exists
    checkfile.open(exactpval_options.correlation_filename);
    if (!checkfile.good()) {
        print_help();
        fprintf(stderr, "\n%s: error: correlation table %s does not exist\n", argv[0], exactpval_options.correlation_filename.c_str());
        exit(1);
    }
    checkfile.close();


    // Make sure our prefix has a trailing '*' for globbing
    if (exactpval_options.bootstrap_prefix.back() != '*') {
        exactpval_options.bootstrap_prefix += "*";
    }


    return exactpval_options;
}

